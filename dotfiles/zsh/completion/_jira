#compdef jira
autoload -U compinit && compinit

typeset -A opt_args

completeTasks() {
    MYISSUES=()
    while read -r LINE; do
        MYISSUES+=($LINE)
    done < /tmp/jiraTasks
    _describe -t MYISSUES 'issue' MYISSUES && ret=0
}

completeProjects() {
    PROJECTS=()
    while read -r LINE; do
        PROJECTS+=($LINE)
    done < /tmp/jiraProjects
    _describe -t PROJECTS 'project' PROJECTS && ret=0
}

completeWorklogs() {
    WORKLOGS=()
    for LINE in $(ls -1 ~/.local/share/jira); do
        WORKLOGS+=($LINE)
    done
    _describe -t WORKLOGS 'worklog' WORKLOGS && ret=0
}

# TODO finished-issues completion for reopen
# TODO script for watch list

_arguments -C \
    '1:cmd:->cmds' \
    '2:subcmd:->subcmds' \
    '*:param:->params' \
    && ret=0

case "$state" in
    (cmds)
        local commands; commands=(
        'help:Show help.'
        'version:Prints version'
        'acknowledge:Transition issue to acknowledge state'
        'assign:Assign user to issue'
        'attach:master cmd to manager attachment'
        'backlog:Transition issue to Backlog state'
        'block:Mark issues as blocker'
        'browse:Open issue in browser'
        'close:Transition issue to close state'
        'comment:Add comment to issue'
        'component add:Add component'
        'components:Show components for a project'
        'create:Create issue'
        'createmeta:View create metadata'
        'done:Transition issue to Done state'
        'dup:Mark issues as duplicate'
        'edit:Edit issue details'
        'editmeta:View edit metadata'
        'epic:Master cmd to manager epicness'
        'export-templates:Export templates for customizations'
        'fields:Prints all fields, both System and Custom'
        'in-progress:Transition issue to Progress state'
        'issuelink:Link two issues'
        'issuelinktypes:Show the issue link types'
        'issuetypes:Show issue types for a project'
        'labels:Master cmd to manager labels'
        'list:Prints list of issues for given search criteria'
        'login:Attempt to login into jira server'
        'logout:Deactivate session with Jira server'
        'rank:Set blocking order'
        'reopen:Transition issue to reopen state'
        'request:Open issue in requestr'
        'resolve:Transition issue to resolve state'
        'start:Transition issue to start state'
        'stop:Transition issue to stop state'
        'subtask:Subtask issue'
        'take:Assign issue to yourself'
        'todo:Transition issue to To Do state'
        'transition:Transition issue to given state'
        'transitions:List valid issue transitions'
        'transmeta:List valid issue transitions in JSON'
        'unassign:Unassign an issue'
        'unexport-templates:Remove unmodified exported templates'
        'view:Prints issue details'
        'vote:Vote up/down an issue'
        'watch:Add/Remove watcher to issue'
        'worklog:Master cmd to manage worklogs'
        'session:Attempt to open session into jira server'
        'mine:display issues assigned to me'
        'in-review:transition issue to In Review'
        'cal:display this week calendar of worklogs'
        'activ:Print gitlab activity linked to account at relativ day $1'
        'search:Search for issues containing word in summary or description'
        'show:Print issue details like "view"')

        _describe -t commands 'command' commands && ret=0 ;;

    (subcmds)
        case $line[1] in
            (attach)
                local subcmds; subcmds=(
                'create:Attach file to issue'
                'get:Fetch attachment'
                'getall:Get all attachment'
                'list:Prints attachment details for issue'
                'remove:Delete attachment'
                'sel:Prompt to fetch attachment')
                _describe -t subcmds 'subcmd' subcmds && ret=0 ;;
            (epic)
                local subcmds; subcmds=(
                'add:Add issues to Epic'
                'create:Create Epic'
                'list:Prints list of issues for an epic with optional search criteria'
                'remove:Remove issues from Epic')
                _describe -t subcmds 'subcmd' subcmds && ret=0 ;;
            (label)
                local subcmds; subcmds=(
                'add:Add labels to an issue'
                'remove:Remove labels from an issue'
                'set:Set labels on an issue')
                _describe -t subcmds 'subcmd' subcmds && ret=0 ;;
            (mine)
                completeProjects ;;
            (worklog)
                local subcmds; subcmds=(
                'add:Add a worklog to an issue'
                'close:Push worklog to server'
                'del:Remove local worklog file'
                'edit:Edit a local worklog'
                'list:Prints the worklog data for given issue'
                'open:Create new local worklog file')
                _describe -t subcmds 'subcmd' subcmds && ret=0 ;;
            (*)
                completeTasks ;;
        esac ;;

    (params)
        case $line[1] in
            (attach)
                _files ;;
            (components | create | createmeta | issuetypes | list | subtask)
                [ $line[2] = "-p" ] && completeProjects ;;
            (component)
                { [ $line[2] = "add" -a $line[3] = "-p" ] && completeProjects } || completeTasks ;;
            (epic)
                { [ $line[2] = "list" -o $line[2] = "create" -a  $line[3] = "-p" ] && completeProjects } || completeTasks ;;
            (worklog)
                { [ $line[2] = "edit" ] || [ $line[2] = "close" ] || [ $line[2] = "del" ] && completeWorklogs } || completeTasks ;;
            (*)
                completeTasks ;;
        esac ;;

    esac

return 0
